Step 1: Install PostgreSQL on Linux
The installation process can vary depending on your Linux distribution. Below are the commands for Ubuntu/Debian and CentOS/RHEL systems.
For Ubuntu/Debian:
Update your package list: sudo apt-get update
Install PostgreSQL: sudo apt-get install postgresql postgresql-contrib
Initialize the database and enable automatic start:
sudo systemctl start postgresql
Verify it is working: ls /var/run/postgresql/
Step 2: Create a Database and User Table
Switch to the PostgreSQL user: sudo -i -u postgres
Access the PostgreSQL prompt: psql
Create a new database: CREATE DATABASE mydatabase;
Connect to the new database: \c mydatabase
Create a table for the web users: CREATE TABLE web_users(    id SERIAL PRIMARY KEY,   username VARCHAR(50) UNIQUE NOT NULL,   password VARCHAR(50) NOT NULL);
Add some sample data: INSERT INTO web_users (username, password) VALUES ('user1', 'pass1'), ('user2', 'pass2');
Exit PostgreSQL prompt: \q
Exit the PostgreSQL user session: exit
Step 3: Design a Simple Web Page
Here's a basic example using Python with Flask and psycopg2 to connect to PostgreSQL. Ensure you have Python and Flask installed, and install psycopg2 with pip install Flask psycopg2.
Create a simple named  app.py:

from flask import Flask, request, render_template_string
import psycopg2
app = Flask(__name__)
# Connect to your postgres DB
conn = psycopg2.connect("dbname=mydatabase user=postgres password=pass")
# Open a cursor to perform database operations
cur = conn.cursor()
@app.route('/', methods=['GET', 'POST'])
def login():
    message = ''
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        # SQL injection vulnerable code
        query = f"SELECT * FROM web_users WHERE username = '{username}' AND password = '{password}';"
        cur.execute(query)
        result = cur.fetchone()
        if result:
            message = 'Logged in successfully.'
        else:
            message = 'Login failed.'
    return render_template_string('''
        <form method="post">
            Username: <input type="text" name="username"><br>
            Password: <input type="password" name="password"><br>
            <input type="submit" value="Login">
        </form>
        <p>{{ message }}</p>
        ''', message=message)
if __name__ == '__main__':
    app.run(debug=True)
NOTE: If you are getting an authintecaion error, then search how to chage th epostgres password to "pass".
then run the following command:
sudo nano /etc/postgresql/17/main/pg_hba.conf (pay attention to yoiur version number), then look for the following:
local   all             postgres                                peer
local   all             all                                     peer
change peer to md5. then restart postgres: sudo systemctl restart postgresql
then restart the application.
3. Now try regular user1 and pass1 to login
4. now try `username` and ' OR '1'='1 to login
This code is intentionally vulnerable to SQL injection to demonstrate the concept. For example, if a user submits the username admin' -- and any password, it can bypass authentication because the SQL command becomes: SELECT * FROM web_users WHERE username = 'admin' --' AND password = 'whatever';
The -- comments out the rest of the SQL statement, effectively ignoring the password check.

Want to fix this? Try parameterized sql using:
cur.execute("SELECT * FROM web_users WHERE username = %s AND password = %s;", (username, password))